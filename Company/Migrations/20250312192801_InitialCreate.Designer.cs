// <auto-generated />
using System;
using Company;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Company.Migrations
{
    [DbContext(typeof(CompanyContext))]
    [Migration("20250312192801_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Company.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Company.Item", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeasurementUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Company.Secretary", b =>
                {
                    b.Property<int>("Secretary_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Secretary_Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Secretary_Id");

                    b.ToTable("Secretaries");
                });

            modelBuilder.Entity("Company.StockReleaseVoucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VoucherDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("StockReleaseVouchers");
                });

            modelBuilder.Entity("Company.StockReleaseVoucherItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StockReleaseVoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("StockReleaseVoucherId");

                    b.ToTable("StockReleaseVoucherItems");
                });

            modelBuilder.Entity("Company.StockReleaseVoucherItemWarehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StockReleaseVoucherItemId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StockReleaseVoucherItemId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("StockReleaseVoucherItemWarehouses");
                });

            modelBuilder.Entity("Company.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Company.SupplyVoucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VoucherDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplyVouchers");
                });

            modelBuilder.Entity("Company.SupplyVoucherItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SupplyVoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("SupplyVoucherId");

                    b.ToTable("SupplyVoucherItems");
                });

            modelBuilder.Entity("Company.SupplyVoucherItemWarehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SupplyVoucherItemId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplyVoucherItemId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("SupplyVoucherItemWarehouses");
                });

            modelBuilder.Entity("Company.TransferVoucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("SourceWarehouseId")
                        .HasColumnType("int");

                    b.Property<int?>("TargetWarehouseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VoucherDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceWarehouseId");

                    b.HasIndex("TargetWarehouseId");

                    b.ToTable("TransferVouchers");
                });

            modelBuilder.Entity("Company.TransferVoucherItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TransferVoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("TransferVoucherId");

                    b.ToTable("TransferVoucherItems");
                });

            modelBuilder.Entity("Company.WareHouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SecretaryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SecretaryId")
                        .IsUnique()
                        .HasFilter("[SecretaryId] IS NOT NULL");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Company.WarehouseItem", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("SupplyVoucherId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "WarehouseId", "SupplyVoucherId");

                    b.HasIndex("SupplyVoucherId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseItems");
                });

            modelBuilder.Entity("Company.StockReleaseVoucher", b =>
                {
                    b.HasOne("Company.Customer", "Customer")
                        .WithMany("StockReleaseVouchers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Company.StockReleaseVoucherItem", b =>
                {
                    b.HasOne("Company.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.StockReleaseVoucher", "StockReleaseVoucher")
                        .WithMany("StockReleaseVoucherItems")
                        .HasForeignKey("StockReleaseVoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("StockReleaseVoucher");
                });

            modelBuilder.Entity("Company.StockReleaseVoucherItemWarehouse", b =>
                {
                    b.HasOne("Company.StockReleaseVoucherItem", "StockReleaseVoucherItem")
                        .WithMany("StockReleaseVoucherItemWarehouses")
                        .HasForeignKey("StockReleaseVoucherItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.WareHouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockReleaseVoucherItem");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Company.SupplyVoucher", b =>
                {
                    b.HasOne("Company.Supplier", "Supplier")
                        .WithMany("SupplyVouchers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Company.SupplyVoucherItem", b =>
                {
                    b.HasOne("Company.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.SupplyVoucher", "SupplyVoucher")
                        .WithMany("SupplyVoucherItems")
                        .HasForeignKey("SupplyVoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("SupplyVoucher");
                });

            modelBuilder.Entity("Company.SupplyVoucherItemWarehouse", b =>
                {
                    b.HasOne("Company.SupplyVoucherItem", "SupplyVoucherItem")
                        .WithMany("SupplyVoucherItemWarehouses")
                        .HasForeignKey("SupplyVoucherItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.WareHouse", "Warehouse")
                        .WithMany("SupplyVoucherItemWarehouses")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplyVoucherItem");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Company.TransferVoucher", b =>
                {
                    b.HasOne("Company.WareHouse", "SourceWarehouse")
                        .WithMany()
                        .HasForeignKey("SourceWarehouseId");

                    b.HasOne("Company.WareHouse", "TargetWarehouse")
                        .WithMany()
                        .HasForeignKey("TargetWarehouseId");

                    b.Navigation("SourceWarehouse");

                    b.Navigation("TargetWarehouse");
                });

            modelBuilder.Entity("Company.TransferVoucherItem", b =>
                {
                    b.HasOne("Company.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.TransferVoucher", "TransferVoucher")
                        .WithMany("TransferVoucherItems")
                        .HasForeignKey("TransferVoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("TransferVoucher");
                });

            modelBuilder.Entity("Company.WareHouse", b =>
                {
                    b.HasOne("Company.Secretary", "Secretary")
                        .WithOne("WareHouse")
                        .HasForeignKey("Company.WareHouse", "SecretaryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Secretary");
                });

            modelBuilder.Entity("Company.WarehouseItem", b =>
                {
                    b.HasOne("Company.Item", "Item")
                        .WithMany("WarehouseItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.SupplyVoucher", "SupplyVoucher")
                        .WithMany("WarehouseItems")
                        .HasForeignKey("SupplyVoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.WareHouse", "Warehouse")
                        .WithMany("WarehouseItems")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("SupplyVoucher");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Company.Customer", b =>
                {
                    b.Navigation("StockReleaseVouchers");
                });

            modelBuilder.Entity("Company.Item", b =>
                {
                    b.Navigation("WarehouseItems");
                });

            modelBuilder.Entity("Company.Secretary", b =>
                {
                    b.Navigation("WareHouse")
                        .IsRequired();
                });

            modelBuilder.Entity("Company.StockReleaseVoucher", b =>
                {
                    b.Navigation("StockReleaseVoucherItems");
                });

            modelBuilder.Entity("Company.StockReleaseVoucherItem", b =>
                {
                    b.Navigation("StockReleaseVoucherItemWarehouses");
                });

            modelBuilder.Entity("Company.Supplier", b =>
                {
                    b.Navigation("SupplyVouchers");
                });

            modelBuilder.Entity("Company.SupplyVoucher", b =>
                {
                    b.Navigation("SupplyVoucherItems");

                    b.Navigation("WarehouseItems");
                });

            modelBuilder.Entity("Company.SupplyVoucherItem", b =>
                {
                    b.Navigation("SupplyVoucherItemWarehouses");
                });

            modelBuilder.Entity("Company.TransferVoucher", b =>
                {
                    b.Navigation("TransferVoucherItems");
                });

            modelBuilder.Entity("Company.WareHouse", b =>
                {
                    b.Navigation("SupplyVoucherItemWarehouses");

                    b.Navigation("WarehouseItems");
                });
#pragma warning restore 612, 618
        }
    }
}
